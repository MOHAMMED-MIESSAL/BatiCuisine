import enums.ProjectStatus;
import model.*;
import repository.implimentation.*;
import repository.interfaces.*;
import service.*;

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.sql.Date;
import java.util.Locale;
import java.util.Scanner;

import java.util.List;

public class Main {
    private static final String RESET = "\u001B[0m";
    private static final String CYAN = "\u001B[36m";
    private static final String GREEN = "\u001B[32m";
    private static final String RED = "\u001B[31m";
    private static final String BOLD = "\033[0;1m";

    // D√©claration des services et repositories comme attributs de classe
    private static ClientService clientService;
    private static ProjectService projectService;
    private static MaterialService materialService;
    private static LabelService labelService;
    private static EstimateService estimateService;

    public static void afficherMenu() {
        System.out.println(CYAN + "\n===============================================");
        System.out.println("      Bienvenue dans l'application de gestion  ");
        System.out.println("     des projets de r√©novation de cuisines     ");
        System.out.println("===============================================\n" + RESET);
        System.out.println(GREEN + "                Menu Principal                  " + RESET);
        System.out.println(GREEN + "------------------------------------------------" + RESET);
        System.out.println(" 1.   Cr√©er un nouveau projet");
        System.out.println(" 2.   Afficher les projets existants");
        System.out.println(" 3.   Calculer le co√ªt d'un projet");
        System.out.println(" 4.   Accepter ou refuser un devis");
        System.out.println(" 5.   Quitter");
        System.out.println(GREEN + "------------------------------------------------" + RESET);
        System.out.print("Choisissez une option : ");
    }

    public static void afficherSousMenuClient() {
        System.out.println(CYAN + "\n===============================================");
        System.out.println("            --- Recherche de client ---       ");
        System.out.println("Souhaitez-vous chercher un client existant ou en ajouter un nouveau ?");
        System.out.println("===============================================\n" + RESET);
        System.out.println(GREEN + "                 Options                 " + RESET);
        System.out.println(GREEN + "-----------------------------------------------" + RESET);
        System.out.println(" 1.    Chercher un client existant");
        System.out.println(" 2.    Ajouter un nouveau client");
        System.out.println(GREEN + "-----------------------------------------------" + RESET);
        System.out.print("Choisissez une option : ");
    }

    public static int rechercherClient(Scanner scanner) {
        System.out.println(CYAN + "\n--- Recherche de client existant ---" + RESET);

        // Validate non-empty input for client name
        String nomClient = "";
        while (nomClient.isEmpty()) {
            System.out.print("Entrez le nom du client : ");
            nomClient = scanner.nextLine().trim();
            if (nomClient.isEmpty()) {
                System.out.println(RED + "Le nom du client ne peut pas √™tre vide. Veuillez r√©essayer." + RESET);
            }
        }

        // Recherche du client
        Client client = clientService.getClientByName(nomClient);
        if (client != null) {
            System.out.println(CYAN + "\n=== Client trouv√© ! ===" + RESET);
            System.out.println(GREEN + "Nom : " + RESET + client.getName());
            System.out.println(GREEN + "Adresse : " + RESET + client.getAddress());
            System.out.println(GREEN + "Num√©ro de t√©l√©phone : " + RESET + client.getPhone());
            System.out.println(CYAN + "========================" + RESET);

            // Demande de confirmation avec validation
            String confirmation = "";
            while (!confirmation.equalsIgnoreCase("y") && !confirmation.equalsIgnoreCase("n")) {
                System.out.print("Souhaitez-vous continuer avec ce client ? (y/n) : ");
                confirmation = scanner.nextLine().trim();
                if (!confirmation.equalsIgnoreCase("y") && !confirmation.equalsIgnoreCase("n")) {
                    System.out.println(RED + "Veuillez entrer 'y' pour Oui ou 'n' pour Non." + RESET);
                }
            }

            if (confirmation.equalsIgnoreCase("y")) {
                return client.getId(); // Retourne l'ID si confirm√©
            } else {
                System.out.println(RED + "Op√©ration annul√©e. Retour au sous-menu." + RESET);
            }
        } else {
            System.out.println(RED + "Client non trouv√©. Veuillez essayer √† nouveau." + RESET);
        }

        return -1; // Retourne -1 si le client n'est pas trouv√© ou l'op√©ration annul√©e
    }

    public static void ajouterNouveauClient(Scanner scanner) {
        System.out.println(CYAN + "\n--- Ajout d'un Nouveau Client ---" + RESET);

        // Enter client details
        String name, address, phone, professionalInput;
        boolean isProfessional = false;

        // Validate name input
        while (true) {
            System.out.print("Entrez le nom du client : ");
            name = scanner.nextLine().trim();
            if (name.isEmpty()) {
                System.out.println(RED + "Erreur : Le nom ne doit pas √™tre vide." + RESET);
            } else {
                break;
            }
        }

        // Validate address input
        while (true) {
            System.out.print("Entrez l'adresse du client : ");
            address = scanner.nextLine().trim();
            if (address.isEmpty()) {
                System.out.println(RED + "Erreur : L'adresse ne doit pas √™tre vide." + RESET);
            } else {
                break;
            }
        }

        // Validate phone input
        while (true) {
            System.out.print("Entrez le num√©ro de t√©l√©phone du client (xx-xx-xx-xx-xx) : ");
            phone = scanner.nextLine().trim();
            if (!phone.matches("\\d{2}-\\d{2}-\\d{2}-\\d{2}-\\d{2}")) {
                System.out.println(RED + "Erreur : Le num√©ro de t√©l√©phone doit respecter le format xx-xx-xx-xx-xx." + RESET);
            } else {
                break;
            }
        }

        // Validate professional status input
        while (true) {
            System.out.print("Le client est-il un professionnel ? (y/n) : ");
            professionalInput = scanner.nextLine().trim();
            if (professionalInput.equalsIgnoreCase("y")) {
                isProfessional = true;
                break;
            } else if (professionalInput.equalsIgnoreCase("n")) {
                isProfessional = false;
                break;
            } else {
                System.out.println(RED + "Erreur : Veuillez entrer 'y' ou 'n'." + RESET);
            }
        }

        // Add client
        clientService.addClient(new Client(0, name, address, phone, isProfessional));
        System.out.println(GREEN + "Client ajout√© avec succ√®s !" + RESET);
    }

    public static Project creationNouveauProjet(Scanner scanner, int clientId) {
        System.out.println(CYAN + "\n--- Cr√©ation d'un Nouveau Projet ---" + RESET);
        // Validate project name input
        String name;
        while (true) {
            System.out.print("Entrez le nom du projet : ");
            name = scanner.nextLine().trim();
            if (name.isEmpty()) {
                System.out.println(RED + "Erreur : Le nom du projet ne doit pas √™tre vide." + RESET);
            } else {
                break;
            }
        }
        // Create project
        Project project = new Project(0, name, 0.0, ProjectStatus.PENDING, 0.0, clientId);
        project = projectService.addProject(project);

        // Confirm project creation
        System.out.println(GREEN + "Projet cr√©√© avec succ√®s !" + RESET);

        return project;
    }

    public static void ajouterComposantAuProjet(Scanner scanner, Project project) {
        String choix;

        do {
            System.out.println(CYAN + "\n===============================================");
            System.out.println("            --- Ajouter un Composant ---      ");
            System.out.println("===============================================\n" + RESET);

            System.out.println(GREEN + "              üìã Choix du Composant üìã        " + RESET);
            System.out.println(GREEN + "-----------------------------------------------" + RESET);

            // Validate component type input
            int type;
            while (true) {
                System.out.print("Type de composant (1: Mat√©riau, 2: Main-d'≈ìuvre) : ");
                if (scanner.hasNextInt()) {
                    type = scanner.nextInt();
                    if (type == 1 || type == 2) {
                        break; // Valid input
                    }
                    System.out.println(RED + "Erreur : Veuillez entrer 1 pour Mat√©riau ou 2 pour Main-d'≈ìuvre." + RESET);
                } else {
                    System.out.println(RED + "Erreur : Veuillez entrer un nombre." + RESET);
                    scanner.next(); // Clear invalid input
                }
            }
            scanner.nextLine(); // Consomme le saut de ligne

            // Validate component name
            String name;
            while (true) {
                System.out.print("Entrez le nom du composant : ");
                name = scanner.nextLine().trim();
                if (!name.isEmpty()) {
                    break;
                } else {
                    System.out.println(RED + "Erreur : Le nom du composant ne doit pas √™tre vide." + RESET);
                }
            }

            // Validate VAT rate
            double vat_rate;
            while (true) {
                System.out.print("Entrez le taux de TVA : ");
                if (scanner.hasNextDouble()) {
                    vat_rate = scanner.nextDouble();
                    if (vat_rate >= 0) {
                        break;
                    }
                }
                System.out.println(RED + "Erreur : Veuillez entrer un taux de TVA valide." + RESET);
                scanner.next(); // Clear invalid input
            }

            // Process material or labor component
            if (type == 1) {
                // Validate material inputs
                System.out.print("Entrez le co√ªt unitaire : ");
                double unit_cost = validateDoubleInput(scanner, "co√ªt unitaire");

                System.out.print("Entrez la quantit√© : ");
                double quantity = validateDoubleInput(scanner, "quantit√©");

                System.out.print("Entrez le co√ªt de transport : ");
                double transport_cost = validateDoubleInput(scanner, "co√ªt de transport");

                System.out.print("Entrez le coefficient de qualit√© (1.0 = standard, > 1.0 = haute qualit√©) : ");
                double coefficient_quality = validateDoubleInput(scanner, "coefficient de qualit√©");

                Material material = new Material(0, name, vat_rate, unit_cost, quantity, transport_cost, coefficient_quality, project.getId());
                materialService.addMaterial(material);
                project.addComponent(material); // Adding the material
                System.out.println(GREEN + "Mat√©riau ajout√© avec succ√®s !" + RESET);

            } else if (type == 2) {
                // Validate labor inputs
                System.out.print("Entrez le taux horaire : ");
                double hourly_rate = validateDoubleInput(scanner, "taux horaire");

                System.out.print("Entrez le nombre d'heures de travail : ");
                double hours_work = validateDoubleInput(scanner, "nombre d'heures de travail");

                System.out.print("Entrez le facteur de productivit√© (1.0 = standard, > 1.0 = haute productivit√©) : ");
                double worker_productivity = validateDoubleInput(scanner, "facteur de productivit√©");

                Labor labor = new Labor(0, name, vat_rate, project.getId(), hourly_rate, hours_work, worker_productivity);
                labelService.addLabel(labor);
                project.addComponent(labor); // Adding the labor
                System.out.println(GREEN + "Main-d'≈ìuvre ajout√©e avec succ√®s !" + RESET);
            }

            System.out.print(CYAN + "Voulez-vous ajouter un autre composant ? (y/n) : " + RESET);
            choix = scanner.next();
            scanner.nextLine(); // Consommer le saut de ligne

            // Validation de l'entr√©e pour 'y' ou 'n'
            while (!choix.equalsIgnoreCase("y") && !choix.equalsIgnoreCase("n")) {
                System.out.println(RED + "Erreur : Veuillez entrer 'y' pour Oui ou 'n' pour Non." + RESET);
                System.out.print(CYAN + "Voulez-vous ajouter un autre composant ? (y/n) : " + RESET);
                choix = scanner.next();
                scanner.nextLine(); // Consommer le saut de ligne
            }


        } while (choix.equalsIgnoreCase("y"));

        System.out.println(GREEN + "Ajout de composants termin√©." + RESET);
    }

    public static void calculerCoutTotal(Project project, Scanner scanner) {
        System.out.println(CYAN + "\n--- Calcul du Co√ªt Total ---" + RESET);

        // Application de la TVA pour le projet
        String applyVAT = getYesNoInput(scanner, "Souhaitez-vous appliquer une TVA au projet ? (y/n) : ");
        double vatPercentage = 0;
        if (applyVAT.equalsIgnoreCase("y")) {
            vatPercentage = getValidDoubleInput(scanner, "pourcentage de TVA (%)");
        }

        // Application de la marge b√©n√©ficiaire
        String applyMargin = getYesNoInput(scanner, "Souhaitez-vous appliquer une marge b√©n√©ficiaire au projet ? (y/n) : ");
        double marginPercentage = 0;
        if (applyMargin.equalsIgnoreCase("y")) {
            marginPercentage = getValidDoubleInput(scanner, "pourcentage de marge b√©n√©ficiaire (%)");
        }

        // Affichage des informations sur le projet avant calcul des co√ªts
        System.out.println(CYAN + "\n--- R√©sultat du Calcul ---" + RESET);
        System.out.println("Nom du projet : " + project.getName());

        Client client = clientService.getClientById(project.getClient_id()); // Exemple de r√©cup√©ration du client
        System.out.println("Client : " + client.getName());
        System.out.println("Adresse du chantier : " + client.getAddress());

        // Calcul des co√ªts
        List<Material> materials = (List<Material>) project.getComponents().get(Material.class);
        double totalMaterialCost = materials.stream()
                .mapToDouble(material -> material.getUnit_cost() * material.getQuantity() * material.getCoefficient_quality() + material.getTransport_cost())
                .sum();

        List<Labor> labors = (List<Labor>) project.getComponents().get(Labor.class);
        double totalLaborCost = labors.stream()
                .mapToDouble(labor -> labor.getHourly_rate() * labor.getHours_work() * labor.getWorker_productivity())
                .sum();

        // Affichage des d√©tails des mat√©riaux
        System.out.println(GREEN + "--- D√©tail des Co√ªts ---" + RESET);
        System.out.println("1. Mat√©riaux :");
        materials.forEach(material -> {
            System.out.println(String.format("- %s : %.2f ‚Ç¨ ( vat rate : %.2f , quantit√© : %.2f , co√ªt unitaire : %.2f ‚Ç¨/unit√© , qualit√© : %.1f , transport : %.2f ‚Ç¨ )",
                    material.getName(),
                    material.getUnit_cost() * material.getQuantity() * material.getCoefficient_quality() + material.getTransport_cost(),
                    material.getVat_rate(),
                    material.getQuantity(),
                    material.getUnit_cost(),
                    material.getCoefficient_quality(),
                    material.getTransport_cost()));
        });
        System.out.println(String.format(BOLD + "**Co√ªt total des mat√©riaux avant TVA : %.2f ‚Ç¨**" + RESET, totalMaterialCost));

        // Appliquer la TVA sur les mat√©riaux
        double totalMaterialCostTaxed = totalMaterialCost + (totalMaterialCost * (vatPercentage / 100));
        System.out.println(String.format(BOLD + "**Co√ªt total des mat√©riaux avec TVA (%.2f%%) : %.2f ‚Ç¨**" + RESET, vatPercentage, totalMaterialCostTaxed));

        // Afficher les d√©tails de la main-d'≈ìuvre
        System.out.println("2. Main-d'≈ìuvre :");
        labors.forEach(labor -> {
            System.out.println(String.format("- %s : %.2f ‚Ç¨ ( vat rate : %.2f , taux horaire : %.2f ‚Ç¨/h, heures travaill√©es : %.2f h, productivit√© : %.1f)",
                    labor.getName(),
                    labor.getHourly_rate() * labor.getHours_work() * labor.getWorker_productivity(),
                    labor.getVat_rate(),
                    labor.getHourly_rate(),
                    labor.getHours_work(),
                    labor.getWorker_productivity()));
        });
        System.out.println(String.format(BOLD + "**Co√ªt total de la main-d'≈ìuvre avant TVA : %.2f ‚Ç¨**" + RESET, totalLaborCost));

        // Appliquer la TVA sur la main-d'≈ìuvre
        double totalLaborCostTaxed = totalLaborCost + (totalLaborCost * (vatPercentage / 100));
        System.out.println(String.format(BOLD + "**Co√ªt total de la main-d'≈ìuvre avec TVA (%.2f%%) : %.2f ‚Ç¨**" + RESET, vatPercentage, totalLaborCostTaxed));

        // Calcul du co√ªt total avant marge b√©n√©ficiaire
        double totalCostProject = totalMaterialCostTaxed + totalLaborCostTaxed;
        System.out.println(String.format(BOLD + "3. Co√ªt total avant marge : %.2f ‚Ç¨" + RESET, totalCostProject));

        double margin = 0;
        // Appliquer la marge b√©n√©ficiaire
        if (applyMargin.equalsIgnoreCase("y")) {
            margin = totalCostProject * (marginPercentage / 100);
            System.out.println(String.format(BOLD + "4. Marge b√©n√©ficiaire (%.2f%%) : %.2f ‚Ç¨" + RESET, marginPercentage, margin));
            totalCostProject += margin;
        }

        // Afficher le co√ªt total final du projet
        System.out.println(String.format(BOLD + "**Co√ªt total final du projet : %.2f ‚Ç¨**" + RESET, totalCostProject));

        // Mettre √† jour de la marge beneficiaire du projet dans la base de donn√©es
        project.setProfit_margin(margin);
        project.setTotal_cost(totalCostProject);

        // Appelle la m√©thode updateProject pour sauvegarder les modifications
        projectService.updateProject(project.getId(), project);
    }

    public static void enregistrerDevis(Project project, Scanner scanner) {
        System.out.println(CYAN + "\n--- Enregistrement du Devis ---" + RESET);

        Date dateEmission = null;
        Date dateValidity = null;

        // Demander et valider les dates d'√©mission et de validit√©
        while (true) {
            // Demander la date d'√©mission
            System.out.print("Entrez la date d'√©mission du devis (format : jj/mm/aaaa) : ");
            String dateEmissionStr = scanner.nextLine();
            dateEmission = parseDate(dateEmissionStr);

            // Demander la date de validit√©
            System.out.print("Entrez la date de validit√© du devis (format : jj/mm/aaaa) : ");
            String dateValidityStr = scanner.nextLine();
            dateValidity = parseDate(dateValidityStr);

            // V√©rification des dates
            if (dateEmission == null || dateValidity == null) {
                System.out.println(RED + "Erreur : Veuillez entrer des dates valides dans le format jj/mm/aaaa." + RESET);
            } else if (!dateValidity.after(dateEmission)) {
                System.out.println(RED + "Erreur : La date de validit√© doit √™tre post√©rieure √† la date d'√©mission." + RESET);
            } else {
                // Si tout est valide, on sort de la boucle
                break;
            }
        }

        // Demander si l'utilisateur souhaite enregistrer le devis
        String saveEstimate = getYesNoInput(scanner, "Souhaitez-vous enregistrer le devis ? (y/n) : ");

        if (saveEstimate.equalsIgnoreCase("y")) {
            // Cr√©er l'objet Estimate
            Estimate estimate = new Estimate(
                    0, // L'ID sera g√©n√©r√© lors de l'enregistrement
                    project.getTotal_cost(), // Montant du devis bas√© sur le co√ªt total
                    dateEmission,
                    dateValidity,
                    null,// Le devis n'est pas encore accept√© par d√©faut
                    project.getId() // ID du projet li√©
            );

            // Sauvegarder l'estimate via le service appropri√©
            estimateService.addEstimate(estimate);

            System.out.println(GREEN + "Devis enregistr√© avec succ√®s !" + RESET);
        } else {
            System.out.println(RED + "Le devis n'a pas √©t√© enregistr√©." + RESET);
        }

        System.out.println(CYAN + "--- Fin du projet ---" + RESET);
    }

    public static void afficherMenuDevis(Scanner scanner, EstimateService estimateService) {
        System.out.println(CYAN + "\n===============================================");
        System.out.println("          --- Accepter ou Refuser un Devis ---");
        System.out.println("===============================================\n" + RESET);

        // Validation de l'ID du devis
        int estimateId;
        while (true) {
            System.out.print("Entrez l'ID du devis : ");
            if (scanner.hasNextInt()) {
                estimateId = scanner.nextInt();
                scanner.nextLine(); // Consommer la ligne vide
                break; // ID valide, on sort de la boucle
            } else {
                System.out.println(RED + "Erreur : Veuillez entrer un nombre entier pour l'ID." + RESET);
                scanner.next(); // Consommer l'entr√©e invalide
            }
        }

        // R√©cup√©ration du devis correspondant √† l'ID
        Estimate estimate = estimateService.getEstimateById(estimateId);
        if (estimate == null) {
            System.out.println(RED + "Erreur : Aucun devis trouv√© avec l'ID " + estimateId + "." + RESET);
            return; // Sortir si le devis n'est pas trouv√©
        }

        // Validation de la d√©cision (acceptation ou refus)
        String decision;
        while (true) {
            System.out.print("Souhaitez-vous accepter (a) ou refuser (r) ce devis ? ");
            decision = scanner.nextLine().trim().toLowerCase();
            if (decision.equals("a") || decision.equals("r")) {
                break; // Choix valide, on sort de la boucle
            } else {
                System.out.println(RED + "Erreur : Veuillez entrer 'a' pour accepter ou 'r' pour refuser." + RESET);
            }
        }

        Project project = projectService.getProjectById(estimate.getProject_id());
        // Traitement de la d√©cision
        if (decision.equals("a")) {
            // Mise √† jour pour accepter le devis
            estimate.setIs_accepted(true);
            estimateService.updateEstimate(estimateId, estimate);
            System.out.println(GREEN + "Devis accept√© avec succ√®s !" + RESET);

            // Mise a jour du status du projet
            project.setState_project(ProjectStatus.InPROGRESS);

        } else {
            // Mise √† jour pour refuser le devis (ou autre logique de refus)
            estimate.setIs_accepted(false);
            estimateService.updateEstimate(estimateId, estimate);
            System.out.println(RED + "Devis refus√©." + RESET);

            // Mise a jour du status du projet
            project.setState_project(ProjectStatus.CANCELED);
        }
        projectService.updateProject(project.getId(), project);
    }

    // Helper method to get yes/no input
    private static String getYesNoInput(Scanner scanner, String prompt) {
        String response;
        while (true) {
            System.out.print(prompt);
            response = scanner.nextLine().trim();
            if (response.equalsIgnoreCase("y") || response.equalsIgnoreCase("n")) {
                return response;
            }
            System.out.println(RED + "Erreur : Veuillez entrer 'y' ou 'n'." + RESET);
        }
    }

    // Helper method to validate double input
    private static double getValidDoubleInput(Scanner scanner, String fieldName) {
        double value;
        while (true) {
            System.out.print("Entrez " + fieldName + ": ");
            if (scanner.hasNextDouble()) {
                value = scanner.nextDouble();
                if (value >= 0) {
                    scanner.nextLine(); // Consomme le saut de ligne
                    return value;
                }
            }
            System.out.println(RED + "Erreur : Veuillez entrer une valeur valide pour " + fieldName + "." + RESET);
            scanner.next(); // Clear invalid input
        }
    }

    // Helper method to validate double input
    private static double validateDoubleInput(Scanner scanner, String fieldName) {
        double value;
        while (true) {
            if (scanner.hasNextDouble()) {
                value = scanner.nextDouble();
                if (value >= 0) {
                    return value;
                }
            }
            System.out.println(RED + "Erreur : Veuillez entrer une valeur valide pour " + fieldName + "." + RESET);
            scanner.next(); // Clear invalid input
        }
    }

    // M√©thode utilitaire pour convertir une date String en java.sql.Date
    private static Date parseDate(String dateStr) {
        try {
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            return new Date(format.parse(dateStr).getTime());
        } catch (ParseException e) {
            System.out.println(RED + "Erreur : Format de date invalide." + RESET);
            return null;
        }
    }


    public static void main(String[] args) throws SQLException {
        // Initialisation des repositories
        ClientRepositoryInterface clientRepository = new ClientRepository();
        ProjectRepositoryInterface projectRepository = new ProjectRepository();
        MaterialRepositoryInterface materialRepository = new MaterialRepository();
        LaborRepositoryInterface labelRepository = new LaborRepository();
        EstimateRepositoryInterface estimateRepository = new EstimateRepository();

        // Initialisation des services
        clientService = new ClientService(clientRepository);
        projectService = new ProjectService(projectRepository);
        materialService = new MaterialService(materialRepository);
        labelService = new LabelService(labelRepository);
        estimateService = new EstimateService(estimateRepository);


        Scanner scanner = new Scanner(System.in);
        scanner.useLocale(Locale.US);
        while (true) {

            // Render main menu
            int choice;
            while (true) {
                afficherMenu();
                if (scanner.hasNextInt()) {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consomme le saut de ligne

                    // Valider que l'entr√©e est entre 1 et 5
                    if (choice >= 1 && choice <= 5) {
                        break; // Input valide, on sort de la boucle
                    } else {
                        System.out.println(RED + "Erreur : Veuillez entrer un nombre entre 1 et 4." + RESET);
                    }
                } else {
                    System.out.println(RED + "Erreur : Veuillez entrer un nombre valide." + RESET);
                    scanner.next(); // Consommer l'entr√©e incorrecte
                }
            }


            switch (choice) {
                case 1:
                    boolean clientExisted = false;
                    int clientId = -1;

                    while (!clientExisted) {

                        // Render sub-menu for client search or add
                        int subChoice;
                        while (true) {
                            afficherSousMenuClient();
                            if (scanner.hasNextInt()) {
                                subChoice = scanner.nextInt();
                                scanner.nextLine(); // Consomme le saut de ligne

                                // Valider que l'entr√©e est 1 ou 2
                                if (subChoice == 1 || subChoice == 2) {
                                    break; // Input valide, on sort de la boucle
                                } else {
                                    System.out.println(RED + "Erreur : Veuillez entrer 1 pour chercher un client ou 2 pour ajouter un nouveau client." + RESET);
                                }
                            } else {
                                System.out.println(RED + "Erreur : Veuillez entrer un nombre valide." + RESET);
                                scanner.next(); // Consommer l'entr√©e incorrecte
                            }
                        }


                        if (subChoice == 1) {
                            // Search for an existing client
                            clientId = rechercherClient(scanner);

                            if (clientId != -1) {
                                // Client found
                                clientExisted = true;
                                System.out.println(GREEN + "Client trouv√© avec succ√®s !" + RESET);

                            }

                        } else if (subChoice == 2) {
                            // Add a new client
                            ajouterNouveauClient(scanner);

                        } else {
                            // Invalid option in sub-menu
                            System.out.println(RED + "Erreur : Option invalide. Veuillez r√©essayer." + RESET);
                        }
                    }

                    // Create a new project after a valid client is found
                    Project projectCreated = creationNouveauProjet(scanner, clientId);

                    // Add components to the project
                    ajouterComposantAuProjet(scanner, projectCreated);

                    // Calculate the total cost of the project
                    calculerCoutTotal(projectCreated, scanner);

                    // Create an estimate for the project
                    enregistrerDevis(projectCreated, scanner);

                    break;

                case 2:
                    System.out.println(CYAN + "\n===============================================");
                    System.out.println("           Liste des Projets Existants        ");
                    System.out.println("===============================================\n" + RESET);

                    List<Project> projects = projectService.getAllProjects();

                    if (projects.isEmpty()) {
                        System.out.println(RED + "Aucun projet disponible." + RESET);
                    } else {
                        for (Project project : projects) {
                            Client client = project.getClient(clientService);
                            System.out.println("Projet ID: " + project.getId() + " | Nom: " + project.getName() + " | Client: " + client.getName() + " | √âtat: " + project.getState_project() + " | Co√ªt total: " + project.getTotal_cost() + " ‚Ç¨");
                        }
                    }
                    break;
                case 3:
                    // Logique pour calculer le co√ªt d'un projet
                    break;
                case 4:
                    // Logique pour accepter ou refuser un devis
                    afficherMenuDevis(scanner, estimateService);
                    break;
                case 5:
                    System.out.println("  Merci d'avoir utilis√© notre application. √Ä bient√¥t !");
                    System.exit(0);
                default:
                    System.out.println("Option invalide. Veuillez r√©essayer.");
            }
        }
    }
}
